<div class="modal-header">
  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
    <span aria-hidden="true">×</span></button>
  <h4 class="modal-title">图片管理</h4>
</div>
<div class="modal-body">
  <div class="row">
    <div class="col-md-3">
      <a class="btn btn-primary btn-block margin-bottom" id="bond" href="javascript:void(0)" >
        <i class="fa fa-plus"></i><span>上传图片</span></a>

      <div class="box box-solid">
        <div class="box-header with-border">
          <h3 class="box-title">图片库</h3>
        </div>
        <div class="box-body no-padding">
          <ul class="nav nav-pills nav-stacked">
            <li class="active"><a href="#"><i class="fa fa-inbox"></i> 后台图片
              </a></li>
          </ul>
        </div>
        <!-- /.box-body -->
      </div>
      <!-- /.box -->
    </div>
    <!-- /.col -->
    <div class="col-md-9">
      <div class="row attachments-list" style="height: 500px;overflow-y: scroll">
        <% @product_attachments.each do |file| %>
          <% if file.preview_url.present? %>
            <div class="col-sm-3">
                <img src="<%= file.preview_url %>" style="width: 140px; height:140px;" class="select_image" onclick="selectImage(this)" file_id="<%= file.id %>"></img>
            </div>
          <% end %>
        <% end %>
      </div>
      <!-- /. box -->
    </div>
    <!-- /.col -->
  </div>
</div>
<div class="modal-footer">
  <button type="button" class="btn btn-default pull-left" data-dismiss="modal">关闭</button>
  <button type="button" class="btn btn-primary" onclick="selectedImages()">确认</button>
</div>


<script type="text/javascript">
    function set_option(name){
        return {
            runtimes: 'html5,html4',          //上传模式,依次退化
            browse_button: name,       //上传选择的点选按钮，**必需**
            uptoken : '<%= @uptoken %>',
            //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
            unique_names: false,
            // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
            save_key: false,
            // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
            domain: '<%= Rails.application.config.qiniu_domain %>',
            //bucket 域名，下载资源时用到，**必需**
            // container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
            max_file_size: '150mb',           //最大文件体积限制
            // flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
            max_retries: 3,                   //上传失败最大重试次数
            // dragdrop: true,                   //开启可拖曳上传
            // drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
            chunk_size: '4mb',                //分块上传时，每片的体积
            auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
            filters: [
                {title: "Image files", extensions: "png,jpg,jpeg,gif,bmp"}
            ],
            init: {
                'FilesAdded': function (up, files) {
                    plupload.each(files, function (file) {
                        // 文件添加进队列后,处理相关的事情
                        // console.log(file);
                        // console.log(file.filename);
                      if(file.type=='image/jpeg'||file.type=='image/jpg'||file.type=='image/png'||file.type=='image/gif'||file.type=='image/bmp') {
                        console.log('type:' + file.type);
                        isUpload = true;
                        // file.album_name=album_name;
                        var progress = new FileProgress(file, 'fsUploadProgress');
                        progress.setStatus("等待...");
                        progress.bindUploadCancel(up);
                      }else {
                        isUpload = false;
                        up.removeFile(file);
                        console.log('上传类型只能是.jpg,.png,.gif');
                        return false;
                      }
                    });
                },
                'BeforeUpload': function (up, file) {
                    showSpinner();
                    // console.log(file);
                    // 加载loading
                    // 每个文件上传前,处理相关的事情
                },
                'UploadProgress': function (up, file) {
                    // 每个文件上传时,处理相关的事情
                },
                'FileUploaded': function (up, file, info) {
                    // 每个文件上传成功后,处理相关的事情
                    // 其中 info 是文件上传成功后，服务端返回的json，形式如
                    // {
                    //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                    //    "key": "gogopher.jpg"
                    //  }
                    // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                    console.log(up);
                    var domain = up.getOption('domain');
                    console.log(info);
                    var res = $.parseJSON(info.response);
                    // var res = parseJSON(info);
                    var sourceLink = domain + res.key; //
                    // 提交到服务器
                    // console.log(info);
                    console.log(sourceLink);
                    console.log(file);
                    $.ajax({
                        type: 'POST',
                        url: '<%= upload_admin_attachments_path %>',
                        data: {file_path: res.key, file_name: file.name, name: name},
                        dataType: 'script',
                        success: function (data) {

                        }
                    })
                },
                'Error': function (up, err, errTip) {
                    //上传出错时,处理相关的事情
                    console.log(err);
                    alert(err.message);
                    hideSpinner()
                },
                'UploadComplete': function () {
                    //队列文件处理完毕后,处理相关的事情
                    console.log('complete')
                },
                'Key': function (up, file) {
                    // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                    // 该配置必须要在 unique_names: false , save_key: false 时才生效
                    // console.log(file)
                    var key = '<%= SecureRandom.uuid %>'  + '.' + file.name.split('.').pop();
                    // do something with key here
                    return key
                }
            }
        }
    }

    $(function(){
        var bond_qiniu = new QiniuJsSDK();
        var bond_option = set_option('bond');
        var bond_uploader = bond_qiniu.uploader(bond_option);
    })

</script>